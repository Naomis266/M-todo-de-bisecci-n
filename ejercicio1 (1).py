# -*- coding: utf-8 -*-
"""EJERCICIO1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i--SBpGplRUt1xt47T3bwpE95aa08mbQ
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir la función
def f(x):
    return x**3 - 4*x - 9

# Algoritmo del Método de Bisección
def biseccion(a, b, tol=1e-3, max_iter=100):
    if f(a) * f(b) >= 0:
        print("El método de bisección no es aplicable en el intervalo dado.")
        return None
    
    iteraciones = []
    errores_abs = []
    errores_rel = []
    errores_cuad = []
    c_old = a  # Para calcular errores

    print("\nIteraciones del Método de Bisección:")
    print("Iter |       a       |       b       |       c       |      f(c)      |     Error Abs     |   Error Rel   |  Error Cuadrático  ")
    print("-" * 110)

    for i in range(max_iter):
        c = (a + b) / 2
        iteraciones.append(c)
        
        error_abs = abs(c - c_old)
        error_rel = abs((c - c_old) / c) if c != 0 else 0
        error_cuad = error_abs**2
        errores_abs.append(error_abs)
        errores_rel.append(error_rel)
        errores_cuad.append(error_cuad)

        print(f"{i+1:4d} | {a:.8f} | {b:.8f} | {c:.8f} | {f(c):.8f} | {error_abs:.8e} | {error_rel:.8e} | {error_cuad:.8e}")

        if abs(f(c)) < tol or error_abs < tol:
            break

        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
        
        c_old = c

    return iteraciones, errores_abs, errores_rel, errores_cuad

# Parámetros iniciales
a, b = 2, 3
iteraciones, errores_abs, errores_rel, errores_cuad = biseccion(a, b)

# Crear una figura para la convergencia del método de bisección
x = np.linspace(a - 1, b + 1, 400)
y = f(x)
fig, ax1 = plt.subplots(figsize=(8, 6))
ax1.plot(x, y, label=r'$f(x) = x^3 - 4x - 9$', color='b')
ax1.axhline(0, color='k', linestyle='--', linewidth=1)  # Línea en y=0
ax1.scatter(iteraciones, [f(c) for c in iteraciones], color='red', label='Iteraciones')
ax1.set_xlabel('x')
ax1.set_ylabel('f(x)')
ax1.set_title("Convergencia del Método de Bisección")
ax1.legend()
ax1.grid()
plt.savefig("convergencia_biseccion.png", dpi=300)
plt.show()

# Crear una figura con los tres errores en una sola gráfica
fig, ax2 = plt.subplots(figsize=(8, 6))
ax2.plot(range(1, len(errores_abs)+1), errores_abs, marker='o', linestyle='-', color='r', label="Error Absoluto")
ax2.plot(range(1, len(errores_rel)+1), errores_rel, marker='s', linestyle='-', color='g', label="Error Relativo")
ax2.plot(range(1, len(errores_cuad)+1), errores_cuad, marker='^', linestyle='-', color='b', label="Error Cuadrático")
ax2.set_yscale("log")  # Escala logarítmica
ax2.set_xlabel("Iteración")
ax2.set_ylabel("Error")
ax2.set_title("Errores Absoluto, Relativo y Cuadrático en cada Iteración")
ax2.legend()
ax2.grid()
plt.savefig("errores_biseccion.png", dpi=300)
plt.show()
